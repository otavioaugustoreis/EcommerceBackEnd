// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TreinandoPráticasApi.Data.Context;

#nullable disable

namespace TreinandoPráticasApi.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250107005230_AjusteApplicationUser")]
    partial class AjusteApplicationUser
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TreinandoPráticasApi.Entities.CategoriaEntity", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("pk_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int?>("Id"));

                    b.Property<DateTime>("DateOfInclusion")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("dh_inclusao");

                    b.Property<string>("DsImagem")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("ds_imagem");

                    b.Property<string>("DsNome")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)")
                        .HasColumnName("ds_nome");

                    b.HasKey("Id");

                    b.ToTable("TB_CATEGORIA");
                });

            modelBuilder.Entity("TreinandoPráticasApi.Entities.PedidoEntity", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("pk_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int?>("Id"));

                    b.Property<DateTime>("DateOfInclusion")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("dh_inclusao");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int")
                        .HasColumnName("fk_usuario");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("TB_PEDIDO");
                });

            modelBuilder.Entity("TreinandoPráticasApi.Entities.PedidoItemEntity", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("pk_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int?>("Id"));

                    b.Property<DateTime>("DateOfInclusion")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("dh_inclusao");

                    b.Property<int>("ProdutoId")
                        .HasColumnType("int")
                        .HasColumnName("fk_produto");

                    b.Property<int>("Quantidade")
                        .HasColumnType("int")
                        .HasColumnName("nr_quantidade");

                    b.Property<double>("Valor")
                        .HasColumnType("double")
                        .HasColumnName("nr_valor");

                    b.Property<int>("pedidoId")
                        .HasColumnType("int")
                        .HasColumnName("fk_pedido");

                    b.HasKey("Id");

                    b.HasIndex("ProdutoId");

                    b.HasIndex("pedidoId");

                    b.ToTable("TB_PEDIDOITEM");
                });

            modelBuilder.Entity("TreinandoPráticasApi.Entities.ProdutoEntity", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("pk_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int?>("Id"));

                    b.Property<DateTime>("DateOfInclusion")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("dh_inclusao");

                    b.Property<string>("DsNome")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("ds_nome");

                    b.Property<int?>("Fkcategoria")
                        .HasColumnType("int")
                        .HasColumnName("fk_categoria");

                    b.Property<int>("NrQuantidade")
                        .HasColumnType("int")
                        .HasColumnName("nr_quantidade");

                    b.HasKey("Id");

                    b.HasIndex("Fkcategoria");

                    b.ToTable("TB_PRODUTO");
                });

            modelBuilder.Entity("TreinandoPráticasApi.Entities.UsuarioEntity", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("pk_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int?>("Id"));

                    b.Property<DateTime>("DateOfInclusion")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("dh_inclusao");

                    b.Property<string>("DsCPF")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("ds_cpf");

                    b.Property<string>("DsEmail")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("ds_email");

                    b.Property<string>("DsNome")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("ds_nome");

                    b.Property<int>("NrIdade")
                        .HasColumnType("int")
                        .HasColumnName("nr_idade");

                    b.Property<int>("PedidoId")
                        .HasColumnType("int")
                        .HasColumnName("fk_pedido");

                    b.HasKey("Id");

                    b.ToTable("TB_USUARIO");
                });

            modelBuilder.Entity("TreinandoPráticasApi._4__Data.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("TreinandoPráticasApi._4__Data.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("TreinandoPráticasApi._4__Data.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TreinandoPráticasApi._4__Data.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("TreinandoPráticasApi._4__Data.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TreinandoPráticasApi.Entities.PedidoEntity", b =>
                {
                    b.HasOne("TreinandoPráticasApi.Entities.UsuarioEntity", "usuarioEntity")
                        .WithMany("pedidoEntities")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("usuarioEntity");
                });

            modelBuilder.Entity("TreinandoPráticasApi.Entities.PedidoItemEntity", b =>
                {
                    b.HasOne("TreinandoPráticasApi.Entities.ProdutoEntity", "produtoEntity")
                        .WithMany("pedidoItens")
                        .HasForeignKey("ProdutoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TreinandoPráticasApi.Entities.PedidoEntity", "PedidoEntity")
                        .WithMany("pedidoItems")
                        .HasForeignKey("pedidoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PedidoEntity");

                    b.Navigation("produtoEntity");
                });

            modelBuilder.Entity("TreinandoPráticasApi.Entities.ProdutoEntity", b =>
                {
                    b.HasOne("TreinandoPráticasApi.Entities.CategoriaEntity", "categoriaEntity")
                        .WithMany("produtoEntity")
                        .HasForeignKey("Fkcategoria");

                    b.Navigation("categoriaEntity");
                });

            modelBuilder.Entity("TreinandoPráticasApi.Entities.CategoriaEntity", b =>
                {
                    b.Navigation("produtoEntity");
                });

            modelBuilder.Entity("TreinandoPráticasApi.Entities.PedidoEntity", b =>
                {
                    b.Navigation("pedidoItems");
                });

            modelBuilder.Entity("TreinandoPráticasApi.Entities.ProdutoEntity", b =>
                {
                    b.Navigation("pedidoItens");
                });

            modelBuilder.Entity("TreinandoPráticasApi.Entities.UsuarioEntity", b =>
                {
                    b.Navigation("pedidoEntities");
                });
#pragma warning restore 612, 618
        }
    }
}
